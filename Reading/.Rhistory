dat <- read.csv("1_KnowledgeStructure/RawData/ReadingListHui.csv")
dat %>%
select(Name, ProDetail, Category, Topic) %>%
datatable(filter = "top", options = list(pageLength = 50))
library(ggplot2)
ggplot(dat, aes(Category)) +
geom_bar()
ggplot(dat, aes(Category, fill = Category)) +
geom_bar() +
coord_flip()
ggplot(dat, aes(Category, color = Category)) +
geom_bar() +
coord_flip()
ggplot(dat, aes(Category, fill = Category)) +
geom_bar() +
coord_flip()
ggplot(dat, aes(Category, fill = Category)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")
pdat <- dat %>%
group_by(Category) %>%
summarise(Count = n())
View(pdat)
View(pdat)
ggplot(pdat, aes(x = Category, y = Count, fill = Category)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")
ggplot(pdat, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none")
ggplot(pdat, aes(x = reorder(Category, -Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none")
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none")
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none") +
axis.text.y=element_blank()
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none", axis.text.y=element_blank())
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none", axis.title.y=element_blank())
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none", axis.title.y=element_blank()) %>%
plotly::ggplotly()
pdat <- dat %>%
group_by(Category) %>%
summarise(Count = n())
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none", axis.title.y=element_blank())
names(dat)
View(dat)
ggplot(dat, aes(Category, fill = ProDetail) ) %>%
geom_bar(position = "fill")
ggplot(dat,aes(x = Category, fill = ProDetail)) %>%
geom_bar(position = "fill")
ggplot(dat,aes(Category, fill = ProDetail)) +
geom_bar(position = "fill")
ggplot(dat,aes(Category, fill = ProDetail)) +
geom_bar(position = "fill") %>%
coord_flip()
ggplot(dat,aes(Category, fill = ProDetail)) +
geom_bar(position = "fill") +
coord_flip()
ggplot(dat,aes(Category, fill = ProDetail)) +
geom_bar(position = "fill") +
coord_flip() +
theme( axis.title.y=element_blank(),
axis.title.x=element_blank())
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("svglite")
install.packages("svglite")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("bookdown")
install.packages("rmarkdown")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(ggplot2)
library(dplyr)
library(DT)
library(ggplot2)
dat <- read.csv("1_KnowledgeStructure/RawData/ReadingListHui.csv")
dat %>%
select(Name, ProDetail, Category, Topic) %>%
datatable(filter = "top", options = list(pageLength = 50))
unique(dat$Category)
idx <- grep("Novel",dat$Category)
dat$Category[idx] <- "Fiction"
unique(dat$Category)
which(is.na(dat$Category))
sdat <- dat[which(is.na(dat$Category)),]
View(sdat)
dat <- read.csv("1_KnowledgeStructure/RawData/ReadingListHui.csv")
idx <- grep("Novel",dat$Category)
dat$Category[idx] <- "Fiction"
dat <- read.csv("1_KnowledgeStructure/RawData/ReadingListHui.csv")
sdat <- dat[which(is.na(dat$Category)),]
dat <- read.csv("1_KnowledgeStructure/RawData/ReadingListHui.csv", stringsAsFactors = F)
idx <- grep("Novel",dat$Category)
dat$Category[idx] <- "Fiction"
unique(dat$Category)
sdat <- dat[which(is.na(dat$Category)),]
dat %>%
select(Name, ProDetail, Category, Topic) %>%
datatable(filter = "top", options = list(pageLength = 50))
dat %>%
group_by(Category) %>%
summarise( count = n()) %>%
arrange(desc(count)) %>%
datatable() %>%
datatable(filter = "top", options = list(pageLength = 50))
dat %>%
group_by(Category) %>%
summarise( count = n()) %>%
arrange(desc(count)) %>%
datatable(filter = "top", options = list(pageLength = 50))
pdat <- dat %>%
group_by(Category) %>%
summarise(Count = n())
ggplot(pdat, aes(x = reorder(Category, Count), y = Count, fill = Category)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(legend.position="none", axis.title.y=element_blank())
ggplot(dat,aes(Category, fill = ProDetail)) +
geom_bar(position = "fill") +
coord_flip() +
theme( axis.title.y=element_blank(),
axis.title.x=element_blank())
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
2,747.15/120000
2747.15/120000
10609.41/120000
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(twitteR)
library(ROAuth)
library(httr)
library(rtweet)
# Set API Keys
api_key <- "bnu4FLGSFTJTh8mGlkbrpzhez"
api_secret <- "8zb5QollQqdUYF0Cm3MHhXWQax575qfGWrQ2w5nBRAVrHN1ONo"
access_token <- "174467976-UjZGpFMIEIvXGVUG34SiHGvmYeDXOx1ZimmcZUE3"
access_token_secret <- "VCnGpyY7UHpFPLfy5eRpn0r6hLRbAQqSVx6LlPhezYgd8"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
users <- getUser('Netlify')
users$followersCount()
users%>%toDataFrame()
users$toDataFrame()
userdf <- users$toDataFrame()
View(userdf)
View(userdf)
netlify_followers<-read.csv("/Users/hui/Dropbox/NetlifyTwitter/Data/netlify_followers2018-03-13.csv")
names(netlify_followers)
netlify_users <- lookupUsers(netlify_followers$id)
netlify_users_df <- netlify_users$toDataFrame()
netlify_users_df <- netlify_users[[1]]$toDataFrame()
View(netlify_users_df)
length(netlify_users_df)
length(netlify_users)
netlify_users_df <- apply(1:length(netlify_users), function(x){netlify_users[[1]]$toDataFrame()})
netlify_users_df <- apply(1:length(netlify_users), function(x){netlify_users[[x]]$toDataFrame()})
netlify_users_df <- apply(1:length(netlify_users), FUN = function(x){netlify_users[[x]]$toDataFrame()}
)
netlify_users_df <- lapply(1:length(netlify_users), FUN = function(x){netlify_users[[x]]$toDataFrame()}
)
netlify_users_df <- data.frame(netlify_users_df)
netlify_users_df <- lapply(1:length(netlify_users), FUN = function(x){netlify_users[[x]]$toDataFrame()}
)
netlify_users_df <- sapply(1:length(netlify_users), FUN = function(x){netlify_users[[x]]$toDataFrame()}
)
View(netlify_users_df)
netlify_users_df%>%dim
netlify_users_df<-netlify_users_df%>%data.frame()
View(netlify_users_df)
netlify_users_df<-netlify_users_df %>%
data.frame()%>%
t()
View(netlify_users_df)
dim(netlify_users_df)
head(netlify_users_df)
netlify_users_df <- data.frame(netlify_users_df)
View(netlify_users_df)
id <-grep('netlify',netlify_users_df$description)
id <- grep('netlify',tolower(netlify_users_df$description))
Encoding(netlify_users_df$description)<- "UTF-8"
Encoding(netlify_users_df$description)
str(netlify_users_df$description)
View(netlify_users_df)
View(netlify_followers)
id <- grep('netlify',tolower(netlify_followers$description))
View(netlify_followers)
tweets_netlify <- searchTwitter('@Netlify', n = 10000)%>%
twListToDF()
tweets_netlify <- searchTwitter('Netlify', n = 10000)%>%
twListToDF()
View(tweets_netlify)
write.csv(tweets_netlify, paste0("/Users/hui/Dropbox/NetlifyTwitter/Data/netlify_followers",
Sys.Date(), ".csv"),row.names = F)
write.csv(tweets_netlify, paste0("/Users/hui/Dropbox/NetlifyTwitter/Data/tweets_netlify",
Sys.Date(), ".csv"),row.names = F)
tweets_netlify_old<-read.csv("/Users/hui/Dropbox/NetlifyTwitter/Data/tweets_netlify2018-03-02.csv")
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()
library(twitteR)
library(ROAuth)
library(httr)
library(rtweet)
library(readr)
library(dplyr)
tweets_netlify_old<-read_csv("/Users/hui/Dropbox/NetlifyTwitter/Data/tweets_netlify2018-03-02.csv")
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()
summary(tweetdat)
View(tweetdat)
length(unique(tweetdat$created))
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()%>%
group_by(created)%>%
slice(1) %>%
ungroup
View(tweetdat)
write.csv(tweetdat, paste0("/Users/hui/Dropbox/NetlifyTwitter/Data/tweets_netlify",
Sys.Date(), ".csv"),row.names = F)
Sys.Date()
View(tweetdat)
names(tweetdat)
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()%>%
group_by(created)%>%
arrange(retweetCount)
View(tweetdat)
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()%>%
group_by(truncated)%>%
arrange(retweetCount)
View(tweetdat)
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()%>%
group_by(truncated)%>%
arrange(retweetCount)
View(tweetdat)
tweetdat <- rbind(tweets_netlify_old,tweets_netlify)%>%
distinct()%>%
group_by(created)%>%
arrange(desc(retweetCount) ) %>%
slice(1) %>%
ungroup()
write.csv(tweetdat, paste0("/Users/hui/Dropbox/NetlifyTwitter/Data/tweets_netlify",
Sys.Date(), ".csv"),row.names = F)
View(netlify_followers)
View(netlify_followers)
id <- grep('netlify',tolower(netlify_followers$description))
netlify_followers$description[6]
length(netlify_followers$description[6])
stringr::str_length(netlify_followers$description[6])
stringr::str_length(stri_enc_toutf8(netlify_followers$description[6]))
library(stringi)
stringr::str_length(stri_enc_toutf8(netlify_followers$description[6]))
stri_enc_toutf8(netlify_followers$description[6])
library(stringr)
strtrim(stri_enc_toutf8(netlify_followers$description[6]), 100)
strtrim(stri_enc_toutf8(netlify_followers$description[6]), 200)
strtrim(stri_enc_toutf8(netlify_followers$description[6]), 150)
0.848/0.807
0.848/0.696
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(bayesm)
data(orangeJuice)
rfj=subset(orangeJuice$yx,store==2)
492+2364+160
bookdown::render_book("index.Rmd", "bookdown::gitbook")
0.42*52
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(cleanNLP)
library(reticulate)
library(stringr)
library(dplyr)
library(readr)
cnlp_init_tokenizers()
dat<-read_csv("Data/MessageClean.csv")%>%
arrange(desc(received_at)) %>%
filter(str_length(message_body) > 30)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
492.14+2363.13+160.58
50/6000
1850/30
1860/30
62*3
3016+186+1680
66.72+53.74+67.85
66.72+53.74+67.85+4882
3016+1680+188.3
9/9.5
11/12
pnorm(11/12,0.947, 0.029)
pnorm(11/12,0.965, 0.026)
10/0.7
3000/6.5*12
3000/6.5*12/0.7
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
500000/(2459*12)
library(keras)
install.packages("keras")
library(keras)
<<<<<<< HEAD
bookdown::render_book("index.Rmd", "bookdown::gitbook")
=======
library(dplyr)
library(stringr)
library(readr)
library(dygraphs)
library(ggplot2)
library(plotly)
install.packages("plotly")
library(plotly)
dat <- read.csv("Data/GrowtAccountClean.csv")
netlify <- dat %>%
filter(reseller2 == "Netlify" & time != "2017-08") %>%
spread(Group, count) %>%
mutate(Total = New + Retained + Resurrected,
Churned = lag(Total) - Retained,
RetainPct = round(Retained/(Retained+Churned),2),
QuickRatio = round((New + Resurrected)/Churned,2))
library(tidyr)
netlify <- dat %>%
filter(reseller2 == "Netlify" & time != "2017-08") %>%
spread(Group, count) %>%
mutate(Total = New + Retained + Resurrected,
Churned = lag(Total) - Retained,
RetainPct = round(Retained/(Retained+Churned),2),
QuickRatio = round((New + Resurrected)/Churned,2))
bit <- dat %>%
filter(reseller2 == "BitBalloon" & time != "2017-08") %>%
spread(Group, count) %>%
mutate(Total = New + Retained + Resurrected,
Churned = lag(Total) - Retained,
RetainPct = round(Retained/(Retained+Churned),2),
QuickRatio = round((New + Resurrected)/Churned,2) )
others <- dat %>%
filter(reseller2 == "Others" & time != "2017-08") %>%
spread(Group, count) %>%
mutate(Total = New + Retained + Resurrected,
Churned = lag(Total) - Retained,
RetainPct = round(Retained/(Retained+Churned),2),
QuickRatio = round((New + Resurrected)/Churned,2))
p1 <- plot_ly(netlify) %>%
add_trace(x = ~time, y= ~New, type = 'bar', name = 'New') %>%
add_trace(x = ~time, y= ~Retained, type = 'bar', name = 'Retained') %>%
add_trace(x = ~time, y= ~Resurrected, type = 'bar', name = 'Resurrected') %>%
layout(xaxis = list(title = "" , tickangle = -30),
yaxis = list(title = 'Count'), barmode = 'stack')%>%
add_bars(x ~ time,
y ~ Churned,
base = -netlify$Churned,
marker = list(color = 'red'),
name = 'Churned',
hoverinfo = 'text',
text = ~paste("(",time, "," , Churned,")"))
p11 <- plot_ly(netlify, x = ~time, y = ~RetainPct) %>%
add_lines(name = "Retention Rate",hoverinfo = "text",text = ~paste(round(RetainPct* 100, 0), '%'))%>%
layout(xaxis = list(title = "", tickangle = -30),
yaxis = list(title = "Retention %")
)
p2 <- plot_ly(bit,x = ~time, y= ~New, type = 'bar', name = 'New') %>%
add_trace(x = ~time, y= ~Retained, type = 'bar', name = 'Retained') %>%
add_trace(x = ~time, y= ~Resurrected, type = 'bar', name = 'Resurrected') %>%
layout(xaxis = list(title = "", tickangle = -30),
yaxis = list(title = 'Count'), barmode = 'stack')%>%
add_bars(x ~ time,
y ~ Churned,
base = -bit$Churned,
marker = list(color = 'red'),
name = 'Churned',
hoverinfo = 'text',
text = ~paste("(",time, "," , Churned,")"))
p21 <- plot_ly(bit, x = ~time, y = ~RetainPct) %>%
add_lines(name = "Retention Rate",hoverinfo = "text",text = ~paste(round(RetainPct* 100, 0), '%'))%>%
layout(xaxis = list(title = "", tickangle = -30),
yaxis = list(title = "Retention %")
)
p3 <- plot_ly(others,x = ~time, y= ~New, type = 'bar', name = 'New') %>%
add_trace(x = ~time, y= ~Retained, type = 'bar', name = 'Retained') %>%
add_trace(x = ~time, y= ~Resurrected, type = 'bar', name = 'Resurrected') %>%
layout(xaxis = list(title = "", tickangle = -30),
yaxis = list(title = 'Count'), barmode = 'stack')%>%
add_bars(x ~ time,
y ~ Churned,
base = - others$Churned,
marker = list(color = 'red'),
name = 'Churned',
hoverinfo = 'text',
text = ~paste("(",time, "," , Churned,")"))
subplot(p1, p11, nrows = 1)
library(RPostgreSQL)
library(dplyr)
library(dbplyr)
library(DBI)
library(lubridate)
library(stringr)
pg = dbDriver("PostgreSQL")
# Connect to your database
con_auditory = dbConnect(pg, user="netlify_auditory", password="dixyhxjbBKeWhXgYe9hTicwv282edf8b",
host="netlify-auditory.cgvqep5r03fj.us-west-2.redshift.amazonaws.com", port=5439, dbname="auditory")
# dbListTables(con_auditory)
install.packages("RPostgreSQL")
library(RPostgreSQL)
library(dplyr)
library(dbplyr)
library(DBI)
library(lubridate)
library(stringr)
pg = dbDriver("PostgreSQL")
con_auditory = dbConnect(pg, user="netlify_auditory", password="dixyhxjbBKeWhXgYe9hTicwv282edf8b",
host="netlify-auditory.cgvqep5r03fj.us-west-2.redshift.amazonaws.com", port=5439, dbname="auditory")
# dbListTables(con_auditory)
users = dbGetQuery(con_auditory, "select id, reseller, created_at, email from users")
reseller2 = as.character(users$reseller)
reseller2[which(!reseller2 %in% c("Netlify", "BitBalloon"))] = "Others"
users$reseller2 = reseller2
month_user <- users %>%
# filter out by email and reseller
# only consider Netlify users
filter(!str_detect(email, "kiloder")) %>%
#  filter(reseller == "Netlify") %>%
select(created_at, id, reseller2) %>%
mutate(month = str_sub(created_at, 1, 7)) %>%
group_by(month,reseller2) %>%
summarise(users = n()) %>%
mutate(cum_users = cumsum(users)) %>%
mutate(year = str_sub(month, 1, 4))
View(month_user)
View(month_user)
month_user <- users %>%
# filter out by email and reseller
# only consider Netlify users
filter(!str_detect(email, "kiloder")) %>%
#  filter(reseller == "Netlify") %>%
select(created_at, id, reseller2) %>%
mutate(month = str_sub(created_at, 1, 7)) %>%
group_by(month,reseller2) %>%
summarise(users = n()) %>%
mutate(cum_users = cumsum(users)) %>%
mutate(year = str_sub(month, 1, 4)) %>%
filter(month != "2018-06")
View(month_user)
month_user <- users %>%
# filter out by email and reseller
# only consider Netlify users
filter(!str_detect(email, "kiloder")) %>%
#  filter(reseller == "Netlify") %>%
select(created_at, id, reseller2) %>%
mutate(month = str_sub(created_at, 1, 7)) %>%
group_by(month,reseller2) %>%
summarise(users = n()) %>%
mutate(cum_users = cumsum(users)) %>%
mutate(year = str_sub(month, 1, 4))
write.csv(month_user, "Data/monthly_users_signup.csv", row.names =F)
month_user <- users %>%
# filter out by email and reseller
# only consider Netlify users
filter(!str_detect(email, "kiloder")) %>%
#  filter(reseller == "Netlify") %>%
select(created_at, id, reseller2) %>%
mutate(month = str_sub(created_at, 1, 7)) %>%
group_by(month,reseller2) %>%
summarise(users = n()) %>%
mutate(cum_users = cumsum(users)) %>%
mutate(year = str_sub(month, 1, 4))
write.csv(month_user, "/Users/hui/Documents/GitHub/DataScience/Dashboard/Data/monthly_users_signup.csv", row.names =F)
con_metering = dbConnect(pg, user="root", password="fZmZaYqdGekMZRH92Q4vsBeBK]N",
host="metering.cagasc554jy5.us-east-1.redshift.amazonaws.com", port=5439, dbname="prod")
month_act_users = dbGetQuery(con_metering, "set timezone = 'America/Los_Angeles';
select count(distinct user_id), date_trunc('month', from_utc::timestamp) from active_users group by 2")
View(month_act_users)
View(month_act_users)
write.csv(month_act_users, "/Users/hui/Documents/GitHub/DataScience/Dashboard/Data/monthly_active_users.csv", row.names =F)
>>>>>>> 598ac04053dedeb756a94625cb876f7ff58b7dfe
bookdown::render_book("index.Rmd", "bookdown::gitbook")
